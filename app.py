
from flask import Flask, request, jsonify, render_template
from urllib.parse import urlparse
import numpy as np
import pickle
from model import count_dot, count_www, no_of_dir, shortening_service, count_https, count_http, count_per, count_ques, count_hyphen, count_equal, digit_count, letter_count


app = Flask(__name__)
app.static_folder = 'static'  # Specify the static directory if needed

# Load the pickle model
model = pickle.load(open("model.pkl", "rb"))


@app.route("/")
def index():
    return render_template("index.html")

@app.route('/about')  # Renders about.html
def about():
    return render_template('about.html')

@app.route('/contact')  # Renders contact.html
def contact():
    return render_template('contact_us.html')

@app.route("/predict", methods=["POST"])
def predict():
    link = request.form['link']

    count_dot_val = count_dot(link)
    count_www_val = count_www(link)
    count_dir_val = no_of_dir(link)
    short_url_val = shortening_service(link)
    count_https_val = count_https(link)
    count_http_val = count_http(link)
    count_percent_val = count_per(link)
    count_question_val = count_ques(link)
    count_hyphen_val = count_hyphen(link)
    count_equal_val = count_equal(link)
    count_digits_val = digit_count(link)
    count_letters_val = letter_count(link)

    # Create a feature array
    features = np.array([count_dot_val, count_www_val, count_dir_val, short_url_val, count_https_val, count_http_val, count_percent_val, count_question_val, count_hyphen_val, count_equal_val, count_digits_val, count_letters_val]).reshape(1, -1)
    from model import lb_make
    
    # Make prediction using the loaded model
    #numeric_prediction = model.predict(features)

    # Convert the numeric prediction back to the original class using the LabelEncoder
    #predicted_class = lb_make.inverse_transform(numeric_prediction)
    
    #return render_template("index.html", prediction_text="The Link is {}".format(predicted_class[0]))

# Make prediction using the loaded model
    prediction = model.predict(features)

    return render_template("index.html", prediction_text="The Link is {}".format(prediction))

    

if __name__ == "__main__":
    app.run(debug=True)
